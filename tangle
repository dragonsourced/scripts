#!/usr/bin/env lua

local sections = {MAIN = {}}
local section = "MAIN"

local cfg = require "litcfg"
local fmtsec = cfg.fmt.section
local fmtlin = cfg.fmt.lineno
cfg.fmt.section = function(s) return fmtsec:gsub("%%s", s) end
cfg.fmt.lineno = function(f, l)
	return fmtlin:gsub("%%l", l):gsub("%%f", f)
end

local function parse(file, filename)
	local lno = 0
	while true do
		local line = file:read()
		if not line then break end

		lno = lno + 1

		local m = line:match(cfg.fmt.secset)
		if m then
			section = m:upper()
			sections[section] = sections[section] or {}
		elseif line:sub(1,1) == "\t" then
			table.insert(sections[section], {
				file = filename,
				str = line,
				no = lno
			})
		end
	end
end

local function expand(sec)
	local ret = cfg.fmt.section(sec) .. cfg.fmt.crlf

	if not sections[sec] then
		error(sec .. ": Section not found.")
	end

	local prev = {
		file = "",
		str = "",
		no = -1,
	}

	for _,line in ipairs(sections[sec]) do
		local m = line.str:match(cfg.fmt.secexp)
		if m then
			ret = ret .. line.str:gsub(cfg.fmt.secexp,
			function(x)
				return expand(x:upper())
			end) .. cfg.fmt.crlf
		else
			if line.file ~= prev.file or line.no ~= prev.no + 1 then
				ret = ret .. cfg.fmt.lineno(line.file, line.no) .. cfg.fmt.crlf
			end
			prev = line
			ret = ret .. line.str .. cfg.fmt.crlf
		end
	end

	return ret
end

if #arg > 0 then
	for _,filename in ipairs(arg) do
		local file = io.open(filename)
		if file then
			parse(file, filename)
			file:close()
		else
			error(filename .. ": Could not open file")
		end
	end
else
	parse(io.stdin, "stdin")
end

print(expand "MAIN")
