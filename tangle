#!/usr/bin/env lua

local sections = {MAIN = {}}
local section = "MAIN"

local ffn = function(s) return function(...) return s:format(...) end end

local fmt = {
	secset = "^([A-Za-z ]+) :=$",
	secexp = "{([^{}]+)}",

	section = ffn "{%s}",
	lineno  = ffn "{%s:%d}",
}

--[[
	section = "/* %s */",
	lineno  = function(f, l)
		return ('#line %d "%s"'):format(l, f)
	end
]]

local function parse(file, filename)
	local lno = 0
	while true do
		local line = file:read()
		if not line then break end

		lno = lno + 1

		local m = line:match(fmt.secset)
		if m then
			section = m:upper()
			sections[section] = sections[section] or {}
		elseif line:sub(1,1) == "\t" then
			table.insert(sections[section], {
				file = filename,
				str = line,
				no = lno
			})
		end
	end
end

local function expand(sec)
	if not sections[sec] then
		error(sec .. ": Section not found.")
	end

	local prev = {
		file = "",
		str = "",
		no = -1,
	}
	for _,line in ipairs(sections[sec]) do
		local m = line.str:match(fmt.secexp)
		if m then
			local s, e = line.str:find(fmt.secexp)
			print(line.str:sub(1,s-1));
			expand(m:upper())
			print(line.str:sub(e+1));
		else
			if line.file ~= prev.file or line.no ~= prev.no + 1 then
				print(fmt.lineno(line.file, line.no))
			end
			prev = line
			print(line.str)
		end
	end
end

if #arg > 0 then
	for _,filename in ipairs(arg) do
		local file = io.open(filename)
		if file then
			parse(file, filename)
			file:close()
		else
			error(filename .. ": Could not open file")
		end
	end
else
	parse(io.stdin, "stdin")
end

expand "MAIN"
