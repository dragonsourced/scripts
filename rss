#!/bin/sh

FEEDD=~/.sfeed/feeds
NEW="${FEEDD}/.new"

cd "${FEEDD}" || return

# Escape a string so it doesn't mess up my regexes.

_esc() {
    echo "$*" | sed -e 's/\[/\\[/g' -e 's/\]/\\]/g' -e 's/\*/\\*/g' -e 's/\./\\./g'
}

# # of new entries in a given feed/directory.

_new_in() {
	grep "^$(_esc "$(realpath "$*")")	" "${NEW}" | cut -f2
}

# Does the given feed contain any new entries?

_has_new() {
	__n="$(_new_in "$*")"
	[ "$__n" ] && [ "$__n" -ne 0 ]
}

# Strip new entry count from feed name.

_strip_new() {
	sed -e 's/ ([0-9 ]* new)$//' -e 's/^N //' -e 's/^  //'
}

# Self-explanatory.

_list_entries() {
	__t="$(mktemp)"
	__n="$(_new_in "$*")"
	sfeed_fmt title < "$*" > "$__t"
	if [ "$__n" -gt 0 ]; then
		sed "$__n"q "$__t" | sed 's/^/N /'
		sed -e "1,$__n"d -e 's/^/  /' "$__t"
	else
		sed 's/^/  /' "$__t"
	fi
	rm "$__t"
}

_list_feeds() {
	__d="${*:-.}"
	find "$__d" -maxdepth 1\
	    | grep -ve '\.new' -e "^$(_esc "$__d")$"\
	    | while read -r __f; do
		if ! ([ "$NEW_ONLY" ] && ! _has_new "$__f"); then
			echo "$(basename "$__f") ($(_new_in "$__f") new)"
		fi
	done
}

# Extract a readable description from an entry listing.

_desc() {
	__columns=72
	[ "$COLUMNS" -lt "$__columns" ] && __columns=$"COLUMNS"
	sfeed_fmt content\
	    | sed 's/\\n/\n/g'\
	    | lynx -dump -stdin -nomargins -width="${__columns}"
}

# Print a full entry line from, given only the title.

_entry() {
	grep "	$(_esc "$*")	" | sed 1q
}

# Count the number of entries currently present in ${NEW}

_count() {
	# Assumes 1 entry per line.
	find "${FEEDD}" -type f -exec cat {} \; | wc -l
}

# Calculate the # of new entries in a feed,
# or # of new entries in the feeds within
# a directory.

_calc_new() {
	find "$*" -type f -exec cat {} \;\
	    | sfeed_fmt new\
	    | wc -l
}

_cache_new() { 
	find "${FEEDD}" | while read -r __f; do
		echo "$__f	$(_calc_new "$__f")"
	done | grep -ve "${NEW}" -e "${FEEDD}	" > "${NEW}"
}

# Output the feeds with new entries.

_calc_new_diff() {
	diff /tmp/rss.new "${NEW}"\
	    | grep '^> '\
	    | sed 's/^> //'\
	    | cut -f1\
	    | while read -r __nf; do
		[ -f "$__nf" ] && basename "$__nf"
	done\
	    | sed 's/$/, /'\
	    | tr -d '\n'
}

# Update the RSS feeds, sending a notification if any new
# entries show up.

_update() {
	_cache_new
	cp "${NEW}" /tmp/rss.new
	__old="$(_count)"
	sfeed_update
	_cache_new
	__new="$(_count)"
	if diff /tmp/rss.new "${NEW}"; then
		notify-send RSS "$((__new - __old)) new entries in $(_calc_new_diff)"
	fi
	rm /tmp/rss.new
}

# Command handling.

while [ "$1" ]; do
	case $1 in

	cd)
		cd "$2" || exit
		shift ;;

	feed)
		__f="$(echo "$2" | _strip_new)"
		if [ -f "$__f" ]; then
			_list_entries "$__f"
		elif [ -d "$__f" ]; then
			_list_feeds "$__f"
		else
			echo "FEED PREVIEW ERROR"
		fi
		shift
		exit ;;

	desc)
		_entry "$(echo "$3" | _strip_new)" < "$(echo "$2")" | _desc
		exit ;;

	new)
		export NEW_ONLY=yes ;;

	up|update)
		_update ;;

	quit)
		exit ;;

	upq)
		_update; exit ;;

	esac
	shift
done

# Escape a single-quoted string.

_esc_sq() {
	echo "$*" | sed "s/'/'\"'\"'/g"
}

# fzf wrapper.

_fzf() {
	fzf --reverse "$@"
}

# Select a feed.

_selfeed() {
	[ "$PWD" = "$(dirname "$FEEDD")" ] && return

	__feed="$(_list_feeds | NEW_ONLY="${NEW_ONLY}" _fzf --prompt="$(basename "$PWD") " --preview="$0 cd '$(_esc_sq $PWD)' feed {}" | _strip_new)"
	__feed="${__feed:-..}"

	if [ -d "$__feed" ]; then
		cd "$__feed" || return
		_selfeed
	elif [ -f "$__feed" ]; then
		_selentry "$__feed"
	fi
}

# Select an entry from said feed.

_selentry() {
	__sq="$(_esc_sq "$*")"
	__entry="$(_list_entries "$*"\
	    | NEW_ONLY="${NEW_ONLY}" _fzf\
		--prompt="$* "\
		--preview="$0 cd '$(_esc_sq $PWD)' desc '$__sq' {}"\
	    | _strip_new)"

	if [ "$__entry" ]; then
		_entry "$__entry" < "$*" | _selopt
		_selentry "$*"
	fi

	_selfeed
}

# Is the given link an audio file?

_is_aud() {
	echo "$*" | grep -q\
	    -e 'youtube\.com'\
	    -e 'youtu\.be'\
	    -e '\.mp3'\
	    -e '\.m4a'\
	    -e '\.wav'\
	    -e '\.ogg'
}

# Is the given link a video file?

_is_vid() {
	echo "$*" | grep -q\
	    -e 'youtube\.com'\
	    -e 'youtu\.be'\
	    -e '\.mp3'
}

# List available options for a given entry.

OPT_WWW="Open in a web browser"
OPT_CPY="Copy link to clipboard"
OPT_DSC="Read in full"
OPT_TTL="View title"
OPT_VID="Play video"
OPT_AUD="Play audio"

_list_opts() {
	echo "$OPT_DSC"
	echo "$OPT_TTL"
	echo "$OPT_CPY"
	echo "$OPT_WWW"
	if _is_vid "__enc"; then
		echo "$__enc" > /tmp/rss.media
		echo "$OPT_VID"
	elif _is_vid "$__link"; then
		echo "$__link" > /tmp/rss.media
		echo "$OPT_VID"
	fi
	if _is_aud "__enc"; then
		echo "$__enc" > /tmp/rss.media
		echo "$OPT_AUD"
	elif _is_aud "$__link"; then
		echo "$__link" > /tmp/rss.media
		echo "$OPT_AUD"
	fi
}

# Select an option with which to operate upon said entry.

_selopt() {
	__tmp="$(mktemp)"

	cat > "$__tmp"

	__title="$(sfeed_fmt title < "$__tmp")"
	__sq="$(_esc_sq "$__title")"


while true; do
	__link="$(sfeed_fmt link < "$__tmp")"
	__enc="$(sfeed_fmt enclosure < "$__tmp")"
	__opt="$(_list_opts "$__tmp"\
	    | NEW_ONLY="${NEW_ONLY}" _fzf\
		--prompt="$(sfeed_fmt title < "$__tmp" | cut -b-50) "\
	        --preview="$0 desc $__tmp '$__sq'"\
	    | _strip_new)"

	[ -f /tmp/rss.media ] && {
		__media="$(cat /tmp/rss.media)"
		rm -f /tmp/rss.media
	}

	clear

	case "$__opt" in
	"$OPT_WWW")
		if [ "$DISPLAY" ]; then
			x-www-browser "$__link"
		else
			"${BROWSER:-lynx}" "$__link"
		fi ;;
	"$OPT_DSC")
		_desc < "$__tmp" | LESSHISTFILE=/dev/null "${PAGER:-less}" ;;
	"$OPT_TTL")
		sfeed_fmt title < "$__tmp" | LESSHISTFILE=/dev/null "${PAGER:-less}" ;;
	"$OPT_VID")
		nohup vid "$__media" > /dev/null ;;
	"$OPT_AUD")
		clear
		mpv --no-video "$__media" ;;
	"$OPT_CPY")
		echo "$__link" | xsel -b ;;
	*)
		rm "$__tmp"
		return ;;
	esac
done
}

_selfeed
