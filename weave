#!/usr/bin/env lua

ffn = function(s) return function(...) return s:format(...) end end

local ok, cfg = pcall(require, "litcfg")
if not ok then cfg = {
	fmt = {
		secset = "^([A-Za-z ]+) :=$",
		secexp = "{([A-Za-z ]+)}",
		section = ffn "{%s}",
		lineno  = ffn "{%s:%d}",
		crlf = '\n',
	},

	keywords = {
		"program", "unit", "uses",
		"interface", "implementation", "initialization", "finalization",
		"type", "var",
		"const", "begin", "end",
		"while", "for", "do",
		"to", "in"
	},

	casesensitive = false
} end

local ln = io.read()

local italic = false
local bold = false
local inlinecode = false
local codeblock = false

local function iskeyword(w)
	if not cfg.casesensitive then w = w:lower() end
	for _,W in ipairs(cfg.keywords) do
		if not cfg.casesensitive then W = W:lower() end
		if w == W then return true end
	end
	return false
end

while ln do
	ln = ln:gsub("^[^\t].+$", function(x)
		local r = ""
		if codeblock then r = "</pre>" end
		codeblock = false
		r = r .. x:gsub("*", function()
			italic = not italic
			if italic then return "<i>"
			else return "</i>" end
		end):gsub("`", function()
			inlinecode = not inlinecode
			if inlinecode then return "<code>"
			else return "</code>" end
		end)
		return r
	end):gsub("^(.*[^ ]+) *:=$", "\n%1:"
	):gsub("^\t.*$", function(x)
		local r = ""
		if not codeblock then r = "<pre>" end
		codeblock = true
		r = r .. x:sub(2):gsub("%S+", function(x)
			if iskeyword(x) then return "<b>" .. x
			.. "</b>" else return x end
		end):gsub(cfg.fmt.secexp, "<i>%1</i>")
		return r
	end):gsub("^$", function()
		if codeblock then
			codeblock = false
			return "</pre>" .. cfg.fmt.crlf .. "<p>"
		else
			return cfg.fmt.crlf .. "<p>"
		end
	end)
	print(ln)
	ln = io.read()
end
