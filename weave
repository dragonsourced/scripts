#!/usr/bin/env lua

# Usage:
# weave src.txt > out.md
# pandoc --toc -N -Vlang=en --toc=depth=4 -s out.md -o out.html

ffn = function(s) return function(...) return s:format(...) end end

local cfg = require "litcfg"

for k, v in ipairs(cfg.keywords) do
	if not cfg.casesensitive then v = v:lower() end
	cfg.keywords[v] = k
end

local function iskeyword(w)
	if not cfg.casesensitive then w = w:lower() end
	return cfg.keywords[w] ~= nil
end

local sec = {
	0, -- Section
	0, -- Subsection
	0, -- Subsubsection
}

local function secadd(lvl)
	for i = lvl + 1, #sec do
		sec[i] = 0
	end
	sec[lvl] = sec[lvl] + 1
end

local function secid()
	return table.concat(sec, "-")
end

local function htmlesc(s)
	return s
	:gsub("<span[^>]*>(.*)</span>", "%1")
	:gsub("&", "&amp;")
	:gsub("<", "&lt;")
	:gsub(">", "&gt;")
end

local function mkid(x)
	return x:lower()
	:gsub("%p", "")
	:gsub("<span[^>]*>", "")
	:gsub("</span>", "")
	:gsub(" ", "-")
	:gsub("[,.!]", "")
	:gsub("-+", "-")
	.. "-" .. secid()
end

local code = false

local function weave(f)
	local ln = f:read()
	while ln do
		ln = ln
		:gsub("^[^\t].*$", function(x)
			code = false
			return x
			:gsub("^#.*$", function(x)
				local lvl = 0
				x:gsub("#", function() lvl = lvl + 1 end)
				secadd(lvl)
				return x
			end):gsub(cfg.fmt.secset, function(x)
				return (("#"):rep(#sec+1) .. " %s {#%s .secset}"):format(x, mkid(htmlesc(x)))
			end)
		end):gsub("^\t.*$", function(x)
			code = true
			return htmlesc(x)
			:gsub("^\t", "<pre>")
			:gsub("\t", "        ")
			:gsub("$", "</pre>")
			:gsub(cfg.fmt.keyword, function(x)
				if iskeyword(x) then
					return ('<span class="keyword">%s</span>'):format(x)
				else
					return x
				end
			end)
			:gsub(htmlesc(cfg.fmt.secexp), function(x)
				return ('<a href="#%s" class="sec">%s</a>')
				:format(mkid(x), x)
			end)
		end):gsub("^$", function(x) if code then print "<p>" end end)
		print(ln)
		ln = f:read()
	end
end

if #arg > 0 then
	for _,filename in ipairs(arg) do
		local f = io.open(filename)
		if f then
			weave(f)
			f:close()
		else
			error(filename .. ": Could not open file")
		end
	end
else
	weave(io.stdin)
end

print [[

<style>
	.sec { font-family: serif; }
	:not(.sec) > .keyword { font-weight: bold; }
	pre { margin: 0; }
</style>
]]
